name: Build, Test, and Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSIONS: '["8.0.x", "9.0.x"]'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ${{ fromJson(env.DOTNET_VERSIONS) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  release:
    name: Create Release
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release
      
    - name: Publish applications
      run: |
        # 发布 Windows 版本
        dotnet publish src/QuizForge.App/QuizForge.App.csproj \
          --configuration Release \
          --runtime win-x64 \
          --self-contained true \
          --output ./publish/win-x64 \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:EnableCompressionInSingleFile=true
          
        # 发布 Linux 版本
        dotnet publish src/QuizForge.App/QuizForge.App.csproj \
          --configuration Release \
          --runtime linux-x64 \
          --self-contained true \
          --output ./publish/linux-x64 \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:EnableCompressionInSingleFile=true
          
        # 发布 macOS 版本
        dotnet publish src/QuizForge.App/QuizForge.App.csproj \
          --configuration Release \
          --runtime osx-x64 \
          --self-contained true \
          --output ./publish/osx-x64 \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:EnableCompressionInSingleFile=true
          
    - name: Create archives
      run: |
        # 创建 Windows 版本压缩包
        cd ./publish/win-x64
        zip -r ../../QuizForge-Windows-x64.zip .
        cd ../..
        
        # 创建 Linux 版本压缩包
        cd ./publish/linux-x64
        tar -czf ../../QuizForge-Linux-x64.tar.gz .
        cd ../..
        
        # 创建 macOS 版本压缩包
        cd ./publish/osx-x64
        tar -czf ../../QuizForge-macOS-x64.tar.gz .
        cd ../..
        
    - name: Generate Release Notes
      id: release-notes
      run: |
        # 获取版本号
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        
        # 生成发布说明
        cat > RELEASE_NOTES.md << EOF
        ## QuizForge v$VERSION
        
        ### 系统要求
        - Windows 10+ (64-bit)
        - macOS 10.15+ (64-bit)
        - Linux (64-bit)
        
        ### 安装说明
        1. 下载对应平台的压缩包
        2. 解压到任意目录
        3. 运行 QuizForge.App
        
        ### 更新内容
        - 修复了多个编译错误
        - 完善了核心功能
        - 提升了应用程序稳定性
        
        ### 注意事项
        首次运行时可能需要设置执行权限：
        ```bash
        chmod +x QuizForge.App
        ```
        
        ---
        *此版本由 GitHub Actions 自动构建*
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: QuizForge v${{ env.RELEASE_VERSION }}
        body_path: RELEASE_NOTES.md
        files: |
          QuizForge-Windows-x64.zip
          QuizForge-Linux-x64.tar.gz
          QuizForge-macOS-x64.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-test-coverage:
    name: Validate Test Coverage
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run tests with coverage
      run: dotnet test --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults
      
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/*/coverage.cobertura.xml -targetdir:CoverageReport -reporttypes:Html
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: CoverageReport/